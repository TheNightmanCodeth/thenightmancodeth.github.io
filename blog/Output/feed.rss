<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Joe's Blog</title><description>A cautionary tale on the horrors of programming ❤️</description><link>https://www.jdiggity.me</link><language>en</language><lastBuildDate>Sun, 7 Aug 2022 22:21:11 -0400</lastBuildDate><pubDate>Sun, 7 Aug 2022 22:21:11 -0400</pubDate><ttl>250</ttl><atom:link href="https://www.jdiggity.me/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://www.jdiggity.me/posts/first-post</guid><title>Using the Multipeer Connectivity Framework with SwiftUI 4</title><description>A description of my first post.</description><link>https://www.jdiggity.me/posts/first-post</link><pubDate>Sun, 7 Aug 2022 18:32:00 -0400</pubDate><content:encoded><![CDATA[<h1>Using the Multipeer Connectivity Framework with SwiftUI 4</h1><p>Welcome to my first SwiftUI tutorial! In this one, I’m going to be demonstrating how to implement a basic Multipeer connectivity app that uses SwiftUI 4, no UIKit needed!</p><p>Without further ado, let’s begin!</p><p>The basic structure of our app will be as follows:</p><ul><li>A MultipeerSession object to handle pairing and communication with our paired peer</li><li>PairView will show the user a list of available peers and allow them to invite them to a game</li><li>GameView will display the game controls and show the user if they’ve won or lost</li></ul><p>The game will be a basic “Rock, Paper, Scissors” game. The users will pair up with each other, then they will be shown three options, rock, paper or scissors. When the user selects a move it will be sent to the opponent’s device, and once the timer is up the result will be shown.</p><p>With that basic overview out of the way, let’s dive into some code.</p><p>We’ll start by creating the MultipeerSession object. First, we need to import MultipeerConnectivity into our class and inherit NSObject and ObrvableObject.</p><pre><code><span class="keyword">class</span> RPSMultipeerSession: <span class="type">NSObject</span>, <span class="type">ObservableObject</span> {
    <span class="keyword">private let</span> serviceType = <span class="string">"rps-service"</span>
    <span class="keyword">private var</span> myPeerID: <span class="type">MCPeerID</span>
    
    <span class="keyword">public let</span> serviceAdvertiser: <span class="type">MCNearbyServiceAdvertiser</span>
    <span class="keyword">public let</span> serviceBrowser: <span class="type">MCNearbyServiceBrowser</span>
    <span class="keyword">public let</span> session: <span class="type">MCSession</span>
}
</code></pre>]]></content:encoded></item></channel></rss>